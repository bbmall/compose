buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2")
        classpath("gradle.plugin.com.garyclayburg:dockerPreparePlugin:1.3.1")
	}
}

plugins {
    id "com.garyclayburg.dockerprepare" version "1.3.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'com.garyclayburg.dockerprepare'

group = 'pl.malinowski'

def getVersionName = { ->
    def cmd = "git describe --always --long --dirty"
    def proc = cmd.execute()
    project.ext.gitRevision = proc.text.trim()
    version = project.ext.gitRevision
}


getVersionName()

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	runtimeOnly('mysql:mysql-connector-java')
	compileOnly('org.projectlombok:lombok')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	
	compile 'mysql:mysql-connector-java:8.0.13'
    compile 'org.liquibase:liquibase-core'
    compile 'com.h2database:h2:1.4.196'
}

jar {
    manifest {
        attributes  (
         'Implementation-Version': version,
                'Main-Class': mainClass
        )
    }
}

bootRun {
    systemProperties System.properties
}

checkstyle {
    toolVersion '8.10.1'
    configFile file("src/main/resources/checkstyle/checkstyle.xml")
    ignoreFailures = false
    sourceSets = [project.sourceSets.main]
}


jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/jacoco")
}

test {
    useJUnit {
        includeCategories 'pl.malinowski.cpuinfo.UnitTests'
        includeCategories 'pl.malinowski.cpuinfo.RestTests'
    }
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = true
        html.enabled = true
        html.destination = file("$buildDir/jacoco/jacoco.html")
        xml.destination = file("$buildDir/jacoco/jacoco.xml")
        csv.destination = file("$buildDir/jacoco/jacoco.csv")
    }
}

tasks.test.finalizedBy(jacocoTestReport)

findbugs {
    ignoreFailures = true
    toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
    reportsDir = file("$project.buildDir/findbugs")
    effort = "max"
    reportLevel = "low"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

dockerprepare {
    dockerBuildDirectory "${project.buildDir}/dockerlayers"
}

docker {
    name "${project.group}/${jar.baseName}"
    files "${dockerprepare.dockerBuildDirectory}"
    dockerfile file("${dockerprepare.dockerBuildDirectory}/Dockerfile")
    dependsOn  build
}
